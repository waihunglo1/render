// src/vite/plugin.tsx
import chalk from "chalk";
import { parse } from "es-module-lexer";
import { normalizePath as normalizePath2 } from "vite";

// src/client/utils/common.ts
var cutArrayToLastN = (arr, n) => {
  if (arr.length < n)
    return arr;
  return arr.slice(arr.length - n);
};

// src/vite/editor.ts
import { exec } from "child_process";
import fs2 from "fs";
import path from "path";
import { normalizePath } from "vite";

// src/vite/utils.ts
import fs from "fs";
async function processPlugins(pluginDirectoryPath) {
  const fs3 = await import("fs");
  const { join } = await import("path");
  const files = fs3.readdirSync(pluginDirectoryPath);
  const allExports = [];
  for (const file of files) {
    const filePath = join(pluginDirectoryPath, file);
    const fileCode = fs3.readFileSync(filePath, "utf8");
    const lines = fileCode.split("\n");
    for (const line of lines) {
      if (line.includes("export const")) {
        const [name] = line.split("export const ")[1].split(" =");
        allExports.push({ name, path: join("..", filePath).replaceAll("\\", "/") });
      }
    }
  }
  return allExports;
}
var handleDevToolsViteRequest = (req, res, next, cb) => {
  if (!req.url?.includes("remix-development-tools-request")) {
    return next();
  }
  const chunks = [];
  req.on("data", (chunk) => {
    chunks.push(chunk);
  });
  req.on("end", () => {
    const dataToParse = Buffer.concat(chunks);
    try {
      const parsedData = JSON.parse(dataToParse.toString());
      cb(parsedData);
    } catch (e) {
    }
    res.write("OK");
  });
};
function checkPath(routePath, extensions = [".tsx", ".jsx", ".ts", ".js"]) {
  if (fs.existsSync(routePath) && fs.lstatSync(routePath).isDirectory()) {
    return { validPath: routePath, type: "directory" };
  }
  for (const ext of extensions) {
    const filePath = `${routePath}${ext}`;
    if (fs.existsSync(filePath) && fs.lstatSync(filePath).isFile()) {
      return { validPath: filePath, type: "file" };
    }
  }
  return null;
}

// src/vite/editor.ts
var DEFAULT_EDITOR_CONFIG = {
  name: "VSCode",
  open: (path2, lineNumber) => {
    exec(`code -g "${normalizePath(path2).replaceAll("$", "\\$")}${lineNumber ? `:${lineNumber}` : ""}"`);
  }
};
var handleOpenSource = ({
  data,
  openInEditor,
  remixDir
}) => {
  const { source, line, routeID } = data.data;
  const lineNum = line ? `${line}` : void 0;
  if (source) {
    return openInEditor(source, lineNum);
  }
  if (routeID) {
    const routePath = path.join(remixDir, routeID);
    const checkedPath = checkPath(routePath);
    if (!checkedPath)
      return;
    const { type, validPath } = checkedPath;
    const reactExtensions = ["tsx", "jsx"];
    const allExtensions = ["ts", "js", ...reactExtensions];
    const isRoot = routeID === "root";
    const findFileByExtension = (prefix, filePaths) => {
      const file = filePaths.find((file2) => allExtensions.some((ext) => file2 === `${prefix}.${ext}`));
      return file;
    };
    if (isRoot) {
      if (!fs2.existsSync(remixDir))
        return;
      const filesInRemixPath = fs2.readdirSync(remixDir);
      const rootFile = findFileByExtension("root", filesInRemixPath);
      rootFile && openInEditor(path.join(remixDir, rootFile), lineNum);
      return;
    }
    if (type === "directory") {
      const filesInFolderRoute = fs2.readdirSync(validPath);
      const routeFile = findFileByExtension("route", filesInFolderRoute);
      routeFile && openInEditor(path.join(remixDir, routeID, routeFile), lineNum);
      return;
    }
    return openInEditor(validPath, lineNum);
  }
};

// src/vite/plugin.tsx
var routeInfo = /* @__PURE__ */ new Map();
var defineRdtConfig = (config) => config;
var remixDevTools = (args) => {
  const serverConfig = args?.server || {};
  const clientConfig = {
    ...args?.client,
    editorName: args?.editor?.name
  };
  const include = args?.includeInProd ?? false;
  const improvedConsole = args?.improvedConsole ?? true;
  const remixDir = args?.remixDir || "./app";
  const shouldInject = (mode) => mode === "development" || include;
  if (typeof process !== "undefined") {
    process.rdt_config = serverConfig;
  }
  return [
    {
      enforce: "pre",
      name: "remix-development-tools-server",
      apply(config) {
        return config.mode === "development";
      },
      async configureServer(server) {
        server.httpServer?.on("listening", () => {
          process.rdt_port = server.config.server.port ?? 5173;
        });
        server.middlewares.use(
          (req, res, next) => handleDevToolsViteRequest(req, res, next, (parsedData) => {
            const { type, data } = parsedData;
            const id = data.id;
            const existingData = routeInfo.get(id);
            if (existingData) {
              if (type === "loader") {
                existingData.loader = cutArrayToLastN([...existingData.loader, data], 30);
              }
              if (type === "action") {
                existingData.action = cutArrayToLastN([...existingData.action, data], 30);
              }
            } else {
              if (type === "loader") {
                routeInfo.set(id, { loader: [data], action: [] });
              }
              if (type === "action") {
                routeInfo.set(id, { loader: [], action: [data] });
              }
            }
            for (const client of server.hot.channels) {
              client.send("route-info", JSON.stringify({ type, data }));
            }
          })
        );
        server.hot.on("all-route-info", (data, client) => {
          client.send(
            "all-route-info",
            JSON.stringify({
              type: "all-route-info",
              data: Object.fromEntries(routeInfo.entries())
            })
          );
        });
        if (!server.config.isProduction) {
          const editor = args?.editor ?? DEFAULT_EDITOR_CONFIG;
          const openInEditor = (path2, lineNum) => {
            if (!path2) {
              return;
            }
            editor.open(path2, lineNum);
          };
          server.hot.on("open-source", (data) => handleOpenSource({ data, openInEditor, remixDir }));
        }
      }
    },
    ...improvedConsole ? [
      {
        name: "better-console-logs",
        enforce: "pre",
        apply(config) {
          return config.mode === "development";
        },
        async transform(code, id) {
          if (id.includes("node_modules") || id.includes("?raw") || id.includes("dist") || id.includes("build") || !id.includes("app"))
            return;
          if (code.includes("console.")) {
            const lines = code.split("\n");
            return lines.map((line, lineNumber) => {
              if (line.trim().startsWith("//") || line.trim().startsWith("/**") || line.trim().startsWith("*")) {
                return line;
              }
              if (line.replaceAll(" ", "").includes("=>console.") || line.includes("return console.")) {
                return line;
              }
              const column = line.indexOf("console.");
              const logMessage = `"${chalk.magenta("LOG")} ${chalk.blueBright(`${id.replace(normalizePath2(process.cwd()), "")}:${lineNumber + 1}:${column + 1}`)}\\n \u2192 "`;
              if (line.includes("console.log(")) {
                const newLine = `console.log(${logMessage},`;
                return line.replace("console.log(", newLine);
              }
              if (line.includes("console.error(")) {
                const newLine = `console.error(${logMessage},`;
                return line.replace("console.error(", newLine);
              }
              return line;
            }).join("\n");
          }
        }
      }
    ] : [],
    {
      name: "remix-development-tools",
      apply(config) {
        return shouldInject(config.mode);
      },
      async configResolved(resolvedViteConfig) {
        if (!args?.suppressDeprecationWarning && resolvedViteConfig.appType === "custom") {
          console.log(
            `

\u26A0\uFE0F  ${chalk.yellowBright("remix-development-tools")} are going to be deprecated and will be renamed to ${chalk.greenBright("react-router-devtools ")} when React Router v7 is released \u26A0\uFE0F`,
            `
\u26A0\uFE0F  Set suppressDeprecationWarning to true in your ${chalk.greenBright("vite.config.ts")} file to silence this warning \u26A0\uFE0F`
          );
        }
        const remixIndex = resolvedViteConfig.plugins.findIndex((p) => p.name === "remix");
        const devToolsIndex = resolvedViteConfig.plugins.findIndex((p) => p.name === "remix-development-tools");
        if (remixIndex >= 0 && devToolsIndex > remixIndex) {
          throw new Error("remixDevTools plugin has to be before the remix plugin!");
        }
      },
      async transform(code, id) {
        const pluginDir = args?.pluginDir || void 0;
        const plugins = pluginDir && process.env.NODE_ENV === "development" ? await processPlugins(pluginDir) : [];
        const pluginNames = plugins.map((p) => p.name);
        if ((id.includes("virtual:server-entry") || id.includes("virtual:remix/server-build")) && process.env.NODE_ENV === "development") {
          const updatedCode = [
            `import { augmentLoadersAndActions } from "remix-development-tools/server";`,
            code.replace("export const routes =", "const routeModules ="),
            "export const routes = augmentLoadersAndActions(routeModules);"
          ].join("\n");
          return updatedCode;
        }
        if (id.endsWith("/root.tsx") || id.endsWith("/root.jsx")) {
          const [, exports] = parse(code);
          const exportNames = exports.map((e) => e.n);
          const hasLinksExport = exportNames.includes("links");
          const lines = code.split("\n");
          const imports = [
            'import { withViteDevTools } from "remix-development-tools/client";',
            'import rdtStylesheet from "remix-development-tools/client.css?url";',
            plugins.map((plugin) => `import { ${plugin.name} } from "${plugin.path}";`).join("\n")
          ];
          const augmentedLinksExport = hasLinksExport ? `export const links = () => [...linksExport(), { rel: "stylesheet", href: rdtStylesheet }];` : `export const links = () => [{ rel: "stylesheet", href: rdtStylesheet }];`;
          const augmentedDefaultExport = `export default withViteDevTools(AppExport, { config: ${JSON.stringify(clientConfig)}, plugins: [${pluginNames.join(
            ","
          )}] })();`;
          const updatedCode = lines.map((line) => {
            if (line.includes("export default function")) {
              const exportName = line.split("export default function ")[1].split("(")[0].trim();
              const newLine = line.replace(`export default function ${exportName}`, "function AppExport");
              return newLine;
            }
            if (line.includes("export default")) {
              const newline = line.replace("export default", "const AppExport =");
              return newline;
            }
            if (line.includes("export const links")) {
              return line.replace("export const links", "const linksExport");
            }
            if (line.includes("export let links")) {
              return line.replace("export let links", "const linksExport");
            }
            if (line.includes("export function links")) {
              return line.replace("export function links", "function linksExport");
            }
            if (line.includes("export {") && line.includes("links") && line.includes("/app/root")) {
              return line.replace("links", "links as linksExport");
            }
            return line;
          });
          return [...imports, ...updatedCode, augmentedLinksExport, augmentedDefaultExport].join("\n");
        }
      }
    }
  ];
};
export {
  defineRdtConfig,
  remixDevTools
};
